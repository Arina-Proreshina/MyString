#ifndef MYSTRING_H
#define MYSTRING_H

/**
 * @brief Вычисляет длину строки.
 *
 * @details
 * Функция возвращает количество символов в строке, не включая нулевой символ '\0'.
 *
 * @param str Указатель на строку, длину которой нужно вычислить.
 * @return Длина строки.
 */
size_t myStrlen(const char* str);

/**
 * @brief Копирует одну строку в другую.
 *
 * @details
 * Функция копирует содержимое строки `src` в строку `dest`, включая нулевой символ '\0'.
 *
 * @param dest Указатель на строку, в которую будет скопирована строка `src`.
 * @param src Указатель на строку, которую нужно скопировать.
 * @note Если размер буфера `dest` меньше буфера `src`, то поведение не определено.
 */
char* myStrcpy(char* dst, const char* src);

/**
 * @brief Конкатенирует одну строку с другой.
 *
 * @details
 * Функция добавляет строку `src` в конец строки `dest`. В результате `dest` будет
 * содержать обе строки, соединенные вместе.
 *
 * @param dest Указатель на строку, к которой будет добавлена строка `src`.
 * @param src Указатель на строку, которую нужно добавить к `dest`.
 * @note Если размер буфера `dest` недостаточен для размещения строки `src`, то поведение не определено.
 */
char* myStrconn(char* dst, const char* src);

/**
 * @brief Ищет первое вхождение символа c в строке str.
 *
 * @details
 * @param str Указатель на строку, в которой выполняется поиск.
 * @param c Символ для поиска.
 * @return Указатель на первое вхождение символа в строке или NULL, если символ не найден.
 */
char* myStrchr(const char* str, int c);

/**
 * @brief Разбивает строку на элементы.
 *
 * @details
 * Функция разбивает строку `str` на элементы, разделенные символами из строки `delim`.
 *
 * @param str Указатель на строку, которую нужно разбить на элементы. При последующих вызовах
 *            этой функции, `str` должен быть `NULL` для продолжения разбиения.
 * @param delim Указатель на строку, содержащую разделители элементов.
 * @return Указатель на текущий элемент, или `NULL`, если элементов больше не осталось.
 */
char* myStrtok(char* str, const char* delim);

/**
 * @brief Сравнивает две строки.
 *
 * @details
 * Функция сравнивает строки str1 и str2 посимвольно, при этом данная функция не учитывает пробелы в начале строк.
 * Она возвращает 0, если строки равны, отрицательное значение, если первая строка меньше второй, и положительное значение, если первая строка больше второй.
 *
 * @param str1 Указатель на первую строку для сравнения.
 * @param str2 Указатель на вторую строку для сравнения.
 *
 * @return int
 * - 0, если строки равны;
 * - отрицательное значение, если str1 меньше str2;
 * - положительное значение, если str1 больше str2.
 *
 * @note Функция нечувствительна к регистру и учитывает все символы, включая пробелы.
 *
 * @warning Убедитесь, что строки `str1` и `str2` завершаются нуль-терминатором `\0`, иначе результат будет неопределённым.
 */
int myStrcmp(const char* str1, const char* str2);

#endif // MYSTRING_H
